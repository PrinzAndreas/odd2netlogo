package formalodd.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionAspectDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.HashMap;
import org.jetbrains.annotations.Nullable;
import java.util.Collection;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class IntentionsDescriptor extends AbstractIntentionAspectDescriptor {
  private static final IntentionFactory[] EMPTY_ARRAY = new IntentionFactory[0];
  private Map<SAbstractConcept, IntentionFactory[]> myCached = new HashMap<SAbstractConcept, IntentionFactory[]>();

  public IntentionsDescriptor() {
  }

  @Nullable
  public Collection<IntentionFactory> getIntentions(@NotNull SAbstractConcept concept) {
    if (myCached.containsKey(concept)) {
      return Arrays.asList(myCached.get(concept));
    }

    IntentionFactory[] intentions = EMPTY_ARRAY;
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        if (true) {
          // Concept: ColorOptions 
          intentions = new IntentionFactory[1];
          intentions[0] = new ColorOptions_Intention();
        }
        break;
      case 1:
        if (true) {
          // Concept: Entity 
          intentions = new IntentionFactory[2];
          intentions[0] = new ShowColors_Intention();
          intentions[1] = new ShowAttribute_Intention();
        }
        break;
      case 2:
        if (true) {
          // Concept: IntentionEffect 
          intentions = new IntentionFactory[1];
          intentions[0] = new Intention_Intention();
        }
        break;
      case 3:
        if (true) {
          // Concept: Location 
          intentions = new IntentionFactory[1];
          intentions[0] = new EnvShowLocation_Intention();
        }
        break;
      case 4:
        if (true) {
          // Concept: ShapeOptions 
          intentions = new IntentionFactory[1];
          intentions[0] = new ShapeOptions_Intention();
        }
        break;
      case 5:
        if (true) {
          // Concept: SliderOption 
          intentions = new IntentionFactory[1];
          intentions[0] = new showSlider_Intention();
        }
        break;
      default:
    }
    myCached.put(concept, intentions);
    return Arrays.asList(intentions);
  }

  @NotNull
  @Override
  public Collection<IntentionFactory> getAllIntentions() {
    IntentionFactory[] rv = new IntentionFactory[7];
    rv[0] = new ShowColors_Intention();
    rv[1] = new ShowAttribute_Intention();
    rv[2] = new ColorOptions_Intention();
    rv[3] = new ShapeOptions_Intention();
    rv[4] = new Intention_Intention();
    rv[5] = new EnvShowLocation_Intention();
    rv[6] = new showSlider_Intention();
    return Arrays.asList(rv);
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x32c6af6fc92141d7L, 0xa19e61a23bec1a47L, 0x35a039196585f0bdL), MetaIdFactory.conceptId(0x32c6af6fc92141d7L, 0xa19e61a23bec1a47L, 0x354cc3720a9ec50eL), MetaIdFactory.conceptId(0x32c6af6fc92141d7L, 0xa19e61a23bec1a47L, 0x2045364d4534e56bL), MetaIdFactory.conceptId(0x32c6af6fc92141d7L, 0xa19e61a23bec1a47L, 0x354cc3720a9ec5c7L), MetaIdFactory.conceptId(0x32c6af6fc92141d7L, 0xa19e61a23bec1a47L, 0x35a0391965961db8L), MetaIdFactory.conceptId(0x32c6af6fc92141d7L, 0xa19e61a23bec1a47L, 0x36f982e7b7b77a1eL)).seal();
}
