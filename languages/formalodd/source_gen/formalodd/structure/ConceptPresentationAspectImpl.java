package formalodd.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Action;
  private ConceptPresentation props_AgentStatistic;
  private ConceptPresentation props_Area;
  private ConceptPresentation props_Average;
  private ConceptPresentation props_Boolean;
  private ConceptPresentation props_Color;
  private ConceptPresentation props_ColorOptions;
  private ConceptPresentation props_ColorShade;
  private ConceptPresentation props_Conditional;
  private ConceptPresentation props_ConditionalAttribute;
  private ConceptPresentation props_ConditionalColor;
  private ConceptPresentation props_Coordinates;
  private ConceptPresentation props_Count;
  private ConceptPresentation props_DefaultColor;
  private ConceptPresentation props_DefaultShape;
  private ConceptPresentation props_Density;
  private ConceptPresentation props_EntitiesStateScales;
  private ConceptPresentation props_Entity;
  private ConceptPresentation props_EntityReference;
  private ConceptPresentation props_Environment;
  private ConceptPresentation props_EnvironmentEntity;
  private ConceptPresentation props_Exponential;
  private ConceptPresentation props_Expression;
  private ConceptPresentation props_Float;
  private ConceptPresentation props_Gamma;
  private ConceptPresentation props_GraphicsWindow;
  private ConceptPresentation props_Integer;
  private ConceptPresentation props_IntentionEffect;
  private ConceptPresentation props_Intentions;
  private ConceptPresentation props_Location;
  private ConceptPresentation props_Max;
  private ConceptPresentation props_Min;
  private ConceptPresentation props_MoreColors;
  private ConceptPresentation props_MoreShapes;
  private ConceptPresentation props_Names;
  private ConceptPresentation props_Normal;
  private ConceptPresentation props_ODD;
  private ConceptPresentation props_Poisson;
  private ConceptPresentation props_Shape;
  private ConceptPresentation props_ShapeInstance;
  private ConceptPresentation props_ShapeOptions;
  private ConceptPresentation props_Slider;
  private ConceptPresentation props_SliderOption;
  private ConceptPresentation props_SpecificLocation;
  private ConceptPresentation props_SpecificXY;
  private ConceptPresentation props_StatisticalDistribution;
  private ConceptPresentation props_String;
  private ConceptPresentation props_Stringvalue;
  private ConceptPresentation props_Sum;
  private ConceptPresentation props_Type;
  private ConceptPresentation props_UserComment;
  private ConceptPresentation props_UserDefinedAttribute;
  private ConceptPresentation props_test;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Action:
        if (props_Action == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Action = cpb.create();
        }
        return props_Action;
      case LanguageConceptSwitch.AgentStatistic:
        if (props_AgentStatistic == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("AgentStatistic");
          props_AgentStatistic = cpb.create();
        }
        return props_AgentStatistic;
      case LanguageConceptSwitch.Area:
        if (props_Area == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Area");
          props_Area = cpb.create();
        }
        return props_Area;
      case LanguageConceptSwitch.Average:
        if (props_Average == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x32c6af6fc92141d7L, 0xa19e61a23bec1a47L, 0x354cc3720a9ec55aL, 0x354cc3720a9ec55bL, "attribute", "", "");
          props_Average = cpb.create();
        }
        return props_Average;
      case LanguageConceptSwitch.Boolean:
        if (props_Boolean == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Boolean");
          props_Boolean = cpb.create();
        }
        return props_Boolean;
      case LanguageConceptSwitch.Color:
        if (props_Color == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Color");
          props_Color = cpb.create();
        }
        return props_Color;
      case LanguageConceptSwitch.ColorOptions:
        if (props_ColorOptions == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ColorOptions");
          props_ColorOptions = cpb.create();
        }
        return props_ColorOptions;
      case LanguageConceptSwitch.ColorShade:
        if (props_ColorShade == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ColorShade");
          props_ColorShade = cpb.create();
        }
        return props_ColorShade;
      case LanguageConceptSwitch.Conditional:
        if (props_Conditional == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Conditional");
          props_Conditional = cpb.create();
        }
        return props_Conditional;
      case LanguageConceptSwitch.ConditionalAttribute:
        if (props_ConditionalAttribute == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("the string should be the name of the attribute so it should include all the environment attributes . alternatively it could be dealt with a list");
          cpb.presentationByName();
          props_ConditionalAttribute = cpb.create();
        }
        return props_ConditionalAttribute;
      case LanguageConceptSwitch.ConditionalColor:
        if (props_ConditionalColor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ConditionalColor");
          props_ConditionalColor = cpb.create();
        }
        return props_ConditionalColor;
      case LanguageConceptSwitch.Coordinates:
        if (props_Coordinates == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Coordinates");
          props_Coordinates = cpb.create();
        }
        return props_Coordinates;
      case LanguageConceptSwitch.Count:
        if (props_Count == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Count");
          props_Count = cpb.create();
        }
        return props_Count;
      case LanguageConceptSwitch.DefaultColor:
        if (props_DefaultColor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DefaultColor");
          props_DefaultColor = cpb.create();
        }
        return props_DefaultColor;
      case LanguageConceptSwitch.DefaultShape:
        if (props_DefaultShape == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DefaultShape");
          props_DefaultShape = cpb.create();
        }
        return props_DefaultShape;
      case LanguageConceptSwitch.Density:
        if (props_Density == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("percentage should be a number between 0 and 100");
          cpb.rawPresentation("Density");
          props_Density = cpb.create();
        }
        return props_Density;
      case LanguageConceptSwitch.EntitiesStateScales:
        if (props_EntitiesStateScales == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EntitiesStateScales = cpb.create();
        }
        return props_EntitiesStateScales;
      case LanguageConceptSwitch.Entity:
        if (props_Entity == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Entity = cpb.create();
        }
        return props_Entity;
      case LanguageConceptSwitch.EntityReference:
        if (props_EntityReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EntityReference");
          props_EntityReference = cpb.create();
        }
        return props_EntityReference;
      case LanguageConceptSwitch.Environment:
        if (props_Environment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Environment");
          props_Environment = cpb.create();
        }
        return props_Environment;
      case LanguageConceptSwitch.EnvironmentEntity:
        if (props_EnvironmentEntity == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EnvironmentEntity = cpb.create();
        }
        return props_EnvironmentEntity;
      case LanguageConceptSwitch.Exponential:
        if (props_Exponential == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Exponential");
          props_Exponential = cpb.create();
        }
        return props_Exponential;
      case LanguageConceptSwitch.Expression:
        if (props_Expression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Expression");
          props_Expression = cpb.create();
        }
        return props_Expression;
      case LanguageConceptSwitch.Float:
        if (props_Float == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Float");
          props_Float = cpb.create();
        }
        return props_Float;
      case LanguageConceptSwitch.Gamma:
        if (props_Gamma == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Gamma");
          props_Gamma = cpb.create();
        }
        return props_Gamma;
      case LanguageConceptSwitch.GraphicsWindow:
        if (props_GraphicsWindow == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("GraphicsWindow");
          props_GraphicsWindow = cpb.create();
        }
        return props_GraphicsWindow;
      case LanguageConceptSwitch.Integer:
        if (props_Integer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Integer");
          props_Integer = cpb.create();
        }
        return props_Integer;
      case LanguageConceptSwitch.IntentionEffect:
        if (props_IntentionEffect == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("IntentionEffect");
          props_IntentionEffect = cpb.create();
        }
        return props_IntentionEffect;
      case LanguageConceptSwitch.Intentions:
        if (props_Intentions == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Intentions");
          props_Intentions = cpb.create();
        }
        return props_Intentions;
      case LanguageConceptSwitch.Location:
        if (props_Location == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Location");
          props_Location = cpb.create();
        }
        return props_Location;
      case LanguageConceptSwitch.Max:
        if (props_Max == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x32c6af6fc92141d7L, 0xa19e61a23bec1a47L, 0x354cc3720a9ec554L, 0x354cc3720a9ec555L, "attribute", "", "");
          props_Max = cpb.create();
        }
        return props_Max;
      case LanguageConceptSwitch.Min:
        if (props_Min == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x32c6af6fc92141d7L, 0xa19e61a23bec1a47L, 0x354cc3720a9ec557L, 0x354cc3720a9ec558L, "min", "", "");
          props_Min = cpb.create();
        }
        return props_Min;
      case LanguageConceptSwitch.MoreColors:
        if (props_MoreColors == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("there should be at least 2 conditional colors");
          cpb.rawPresentation("MoreColors");
          props_MoreColors = cpb.create();
        }
        return props_MoreColors;
      case LanguageConceptSwitch.MoreShapes:
        if (props_MoreShapes == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("constrainted to have 2 children at least");
          cpb.rawPresentation("MoreShapes");
          props_MoreShapes = cpb.create();
        }
        return props_MoreShapes;
      case LanguageConceptSwitch.Names:
        if (props_Names == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Names");
          props_Names = cpb.create();
        }
        return props_Names;
      case LanguageConceptSwitch.Normal:
        if (props_Normal == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Normal");
          props_Normal = cpb.create();
        }
        return props_Normal;
      case LanguageConceptSwitch.ODD:
        if (props_ODD == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ODD = cpb.create();
        }
        return props_ODD;
      case LanguageConceptSwitch.Poisson:
        if (props_Poisson == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Poisson");
          props_Poisson = cpb.create();
        }
        return props_Poisson;
      case LanguageConceptSwitch.Shape:
        if (props_Shape == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Shape");
          props_Shape = cpb.create();
        }
        return props_Shape;
      case LanguageConceptSwitch.ShapeInstance:
        if (props_ShapeInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ShapeInstance = cpb.create();
        }
        return props_ShapeInstance;
      case LanguageConceptSwitch.ShapeOptions:
        if (props_ShapeOptions == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("the options aviable for shapes");
          cpb.rawPresentation("ShapeOptions");
          props_ShapeOptions = cpb.create();
        }
        return props_ShapeOptions;
      case LanguageConceptSwitch.Slider:
        if (props_Slider == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Slider");
          props_Slider = cpb.create();
        }
        return props_Slider;
      case LanguageConceptSwitch.SliderOption:
        if (props_SliderOption == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SliderOption");
          props_SliderOption = cpb.create();
        }
        return props_SliderOption;
      case LanguageConceptSwitch.SpecificLocation:
        if (props_SpecificLocation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SpecificLocation");
          props_SpecificLocation = cpb.create();
        }
        return props_SpecificLocation;
      case LanguageConceptSwitch.SpecificXY:
        if (props_SpecificXY == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SpecificXY");
          props_SpecificXY = cpb.create();
        }
        return props_SpecificXY;
      case LanguageConceptSwitch.StatisticalDistribution:
        if (props_StatisticalDistribution == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StatisticalDistribution");
          props_StatisticalDistribution = cpb.create();
        }
        return props_StatisticalDistribution;
      case LanguageConceptSwitch.String:
        if (props_String == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("String");
          props_String = cpb.create();
        }
        return props_String;
      case LanguageConceptSwitch.Stringvalue:
        if (props_Stringvalue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Stringvalue = cpb.create();
        }
        return props_Stringvalue;
      case LanguageConceptSwitch.Sum:
        if (props_Sum == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x32c6af6fc92141d7L, 0xa19e61a23bec1a47L, 0x354cc3720a9ec560L, 0x354cc3720a9ec561L, "attribute", "", "");
          props_Sum = cpb.create();
        }
        return props_Sum;
      case LanguageConceptSwitch.Type:
        if (props_Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Type");
          props_Type = cpb.create();
        }
        return props_Type;
      case LanguageConceptSwitch.UserComment:
        if (props_UserComment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("UserComment");
          props_UserComment = cpb.create();
        }
        return props_UserComment;
      case LanguageConceptSwitch.UserDefinedAttribute:
        if (props_UserDefinedAttribute == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_UserDefinedAttribute = cpb.create();
        }
        return props_UserDefinedAttribute;
      case LanguageConceptSwitch.test:
        if (props_test == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("test");
          props_test = cpb.create();
        }
        return props_test;
    }
    return null;
  }
}
