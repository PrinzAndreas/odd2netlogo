package formalodd.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AgentStatistic = 0;
  public static final int Area = 1;
  public static final int Average = 2;
  public static final int Boolean = 3;
  public static final int Color = 4;
  public static final int ColorOptions = 5;
  public static final int ColorShade = 6;
  public static final int Conditional = 7;
  public static final int ConditionalColor = 8;
  public static final int Coordinates = 9;
  public static final int Count = 10;
  public static final int DefaultColor = 11;
  public static final int DefaultShape = 12;
  public static final int Definition = 13;
  public static final int Density = 14;
  public static final int EntitiesStateScales = 15;
  public static final int Entity = 16;
  public static final int Environment = 17;
  public static final int EnvironmentAttribute = 18;
  public static final int EnvironmentColor = 19;
  public static final int EnvironmentColorShade = 20;
  public static final int EnvironmentConditionalColor = 21;
  public static final int EnvironmentEntity = 22;
  public static final int Exponential = 23;
  public static final int Float = 24;
  public static final int Gamma = 25;
  public static final int Integer = 26;
  public static final int Location = 27;
  public static final int Max = 28;
  public static final int Min = 29;
  public static final int MoreColors = 30;
  public static final int MoreShapes = 31;
  public static final int Names = 32;
  public static final int Normal = 33;
  public static final int ODD = 34;
  public static final int Poisson = 35;
  public static final int Shape = 36;
  public static final int ShapeInstance = 37;
  public static final int ShapeOptions = 38;
  public static final int SpecificLocation = 39;
  public static final int SpecificXY = 40;
  public static final int StatisticalDistribution = 41;
  public static final int String = 42;
  public static final int Stringvalue = 43;
  public static final int Sum = 44;
  public static final int Type = 45;
  public static final int UserComment = 46;
  public static final int UserDefinedAttribute = 47;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x32c6af6fc92141d7L, 0xa19e61a23bec1a47L);
    builder.put(0x354cc3720a9ec553L, AgentStatistic);
    builder.put(0x354cc3720a9ec5c8L, Area);
    builder.put(0x354cc3720a9ec55aL, Average);
    builder.put(0x354cc3720a9ec52dL, Boolean);
    builder.put(0x354cc3720a9ec574L, Color);
    builder.put(0x35a039196585f0bdL, ColorOptions);
    builder.put(0x354cc3720a9ec592L, ColorShade);
    builder.put(0x354cc3720a9ec5c0L, Conditional);
    builder.put(0x354cc3720a9ec58dL, ConditionalColor);
    builder.put(0x354cc3720a9ec5d0L, Coordinates);
    builder.put(0x354cc3720a9ec55dL, Count);
    builder.put(0x354cc3720a9ec585L, DefaultColor);
    builder.put(0x354cc3720a9ec575L, DefaultShape);
    builder.put(0x354cc3720a9ec5c3L, Definition);
    builder.put(0x354cc3720a9ec5d6L, Density);
    builder.put(0x354cc3720a9ec508L, EntitiesStateScales);
    builder.put(0x354cc3720a9ec50eL, Entity);
    builder.put(0x354cc3720a9ec597L, Environment);
    builder.put(0x354cc3720a9ec5b7L, EnvironmentAttribute);
    builder.put(0x354cc3720a9ec5aaL, EnvironmentColor);
    builder.put(0x354cc3720a9ec5b2L, EnvironmentColorShade);
    builder.put(0x354cc3720a9ec5adL, EnvironmentConditionalColor);
    builder.put(0x354cc3720a9ec5a4L, EnvironmentEntity);
    builder.put(0x354cc3720a9ec550L, Exponential);
    builder.put(0x354cc3720a9ec536L, Float);
    builder.put(0x354cc3720a9ec541L, Gamma);
    builder.put(0x354cc3720a9ec52eL, Integer);
    builder.put(0x354cc3720a9ec5c7L, Location);
    builder.put(0x354cc3720a9ec554L, Max);
    builder.put(0x354cc3720a9ec557L, Min);
    builder.put(0x354cc3720a9ec58aL, MoreColors);
    builder.put(0x354cc3720a9ec57bL, MoreShapes);
    builder.put(0x5be13da8667bda0cL, Names);
    builder.put(0x354cc3720a9ec547L, Normal);
    builder.put(0x354cc3720a9ec507L, ODD);
    builder.put(0x354cc3720a9ec54dL, Poisson);
    builder.put(0x354cc3720a9ec573L, Shape);
    builder.put(0x354cc3720a9ec57eL, ShapeInstance);
    builder.put(0x35a0391965961db8L, ShapeOptions);
    builder.put(0x354cc3720a9ec5c6L, SpecificLocation);
    builder.put(0x354cc3720a9ec5cbL, SpecificXY);
    builder.put(0x354cc3720a9ec53eL, StatisticalDistribution);
    builder.put(0x354cc3720a9ec523L, String);
    builder.put(0x354cc3720a9ec528L, Stringvalue);
    builder.put(0x354cc3720a9ec560L, Sum);
    builder.put(0x354cc3720a9ec522L, Type);
    builder.put(0x5be13da866785777L, UserComment);
    builder.put(0x354cc3720a9ec51fL, UserDefinedAttribute);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
